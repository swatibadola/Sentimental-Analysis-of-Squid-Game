# -*- coding: utf-8 -*-
"""Sentiment Analysis of Squid Game

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q94tX69P3Fm7nZR3J_LXMvCmMEsxXgXJ
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator

data = pd.read_csv("squid_game.csv")
data.head()

data.isnull()

data.columns

"""Dropping the user_location as it's most values are none and also it doesn't affect the sentiment analysis"""

data = data.drop(columns="user_location", axis=1)

data.head()

data.columns

data.isnull().sum()

"""Also droppping user_description"""

data.columns

data = data.dropna()    # dropna() method to remove missing values from dataframe
data.head()

"""Preparing the "text" column for the analysis"""

import nltk
# re is regular expression
import re
nltk.download('stopwords')
stemmer = nltk.SnowballStemmer("english")
from nltk.corpus import stopwords
import string
# using set - allows faster membership testing compared to a list
stopword = set(stopwords.words('english'))

def clean(text):
  text = str(text).lower()
  # re.sub() - replaces one or many matches with a string
  # SYNTAX : re.sub(patter, replacement, text)
  text = re.sub('\[.*?\]', '', text)
  text = re.sub('https?://\S+|www\.\S+', '', text)
  text = re.sub('<.*?>+', '', text)
  text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
  text = re.sub('\n', '', text)
  text = re.sub('\w*\d\w*', '', text)
  text = [word for word in text.split(' ') if word not in stopword]
  text = " ".join(text)
  text = [stemmer.stem(word) for word in text.split(' ')]
  text = " ".join(text)
  return text

data["text"] = data["text"].apply(clean)

"""Detecting the most used words using WORD CLOUD. A data visualization tool that displays most used words in a larger size.
Visualizing word cloud of the text column
"""

text = " ".join(i for i in data.text)
stopwords = set(STOPWORDS)
wordcloud = WordCloud(stopwords=stopwords, background_color="white").generate(text)
plt.figure(figsize=(15,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

"""Adding columns positive, negative, and neutral by calculating sentiment scores of text col"""

# VADER lexicon -
## key component of VADER sentiment analysis tool.
## It is a list of words and phrases, each assigned a sentiment score that indicates emotional intensity  conveyed by a word or phrase.
nltk.download('vader_lexicon')
sentiments = SentimentIntensityAnalyzer()
data["Positive"] = [sentiments.polarity_scores(i)["pos"] for i in data["text"]]
data["Negative"] = [sentiments.polarity_scores(i)["neg"] for i in data["text"]]
data["Neutral"] = [sentiments.polarity_scores(i)["neu"] for i in data["text"]]
data = data[["text", "Positive", "Negative", "Neutral"]]
data

"""Calculating how people think about the squid game"""

x = sum(data["Positive"])
y = sum(data["Negative"])
z = sum(data["Neutral"])

def sentiment_score(a, b, c):
  if (a>b) and (a>c):
    print("Positive")
  elif (b>a) and (b>c):
    print("Negative")
  else:
    print("Neutral")
sentiment_score(x,y,z)

"""Total of each sentiment score"""

print("Postive: ", x)
print("Negative: ", y)
print("Neutral: ", z)